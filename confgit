#!/usr/bin/env python

import zipfile
from utils import *


def init(repo_dir, config_path):
    set_cwd_to(repo_dir)
    if not path.isfile(config_path):
        with open(config_path, "w") as new_config:
            new_config.write(
                f"repo_dir: {path_relative_home(getcwd())}/\n" +
                "include: NULL\n" +
                "exclude: NULL"
            )
        cg_print(f"New config file generated: {config_path}")
    else:
        print_warning(f"Config file {config_path} already exists")
    execute_command("git init")
    end()


def sync():
    # git pull
    # nakopírovat configy na originy
    pass


def update():
    # nakopírovat originy na jejich kopie
    pass


def backup(repo_dir, backup_name):
    if backup_name[-4:] != ".zip":
        backup_name += ".zip"
    backup_zip_file = zipfile.ZipFile(backup_name, mode="w", compression=zipfile.ZIP_DEFLATED)
    cg_print("Creating backup:")

    for root, directories, files in walk(repo_dir):
        for i, filename in enumerate(files):
            print(f"\t\t{'├── ' if i < len(files) - 1 else '└── '}{filename}")
            backup_zip_file.write(path.join(root, filename), arcname=filename)
    backup_zip_file.close()
    cg_print(f"Backup saved as {backup_name}")


def include(file_to_include, config, config_path):
    if file_to_include == "" or file_to_include is None:
        print_error("You have to specify file for include")
        end(1)
    if not path.exists(file_to_include):
        print_error(f"File or directory {file_to_include} does not exists")
        end(1)
    if config["include"] is None:
        config["include"] = []
    if file_to_include in config["include"]:
        cg_print(f"{file_to_include} is already included")
        end()
    config["include"].append(path_relative_home(file_to_include))
    save_config(config, config_path)
    cg_print(f"{file_to_include} has been successfully included in to confgit repository")
    end()


def exclude(file):
    pass


if __name__ == '__main__':
    if contains_confgit_command():
        args = vars(get_arguments())
        print_debug(args)
        if "init_path" in args.keys():
            init(args["init_path"], args["CONFIG_PATH"])

        config = load_config(args["CONFIG_PATH"])
        print_debug(config)

        if "file_to_include" in args.keys():
            include(args["file_to_include"], config, args["CONFIG_PATH"])

    else:
        config, git_command = parse_git_args()
        set_cwd_to(config["repo_dir"])
        send_to_git(git_command)


    #if args.BACKUP:
        #backup(config.repo_dir, args.BACKUP)
    #elif args.FILE_TO_INCLUDE is not None:
        #include(args.FILE_TO_INCLUDE, config, args.CONFIG_PATH)

