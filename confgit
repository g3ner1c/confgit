#!/usr/bin/env python

import zipfile
from sys_util import *
from fs_util import *


def init(repo_dir, config_path):
    set_cwd_to(repo_dir)
    if not path.isfile(config_path):
        with open(config_path, "w") as new_config:
            new_config.write(
                f"repo_dir: {path_relative_home(getcwd())}/\n" +
                "include: NULL\n" +
                "exclude: NULL"
            )
        cg_print(f"New config file generated: {config_path}")
    else:
        print_warning(f"Config file {config_path} already exists")
    execute_command("git init")
    end()


def sync(config):
    cg_print("Start syncing")
    registered_files = get_all_registered_files(config)
    registered_files_dif = []
    for rf in registered_files:
        if not have_same_content(rf, path_in_repo(rf, config)):
            registered_files_dif.append(rf)
    if len(registered_files_dif) == 0:
        cg_print("There are no changes in complementary files of registered files")
        end()
    for rf in registered_files_dif:
        cg_print(f"\t{rf}")
    cg_print("Do you want to sync content of all these files with theirs complementary files ? [Y/N]")
    answer = str(input()).lower()
    if answer == "y":
        for rf in registered_files_dif:
            cg_print(f"Syncing {path_relative_home(rf)}")
            write_file_to_other_file(path_in_repo(rf, config), rf)
    end()


def update(config):
    cg_print("Start updating")
    files_to_include = get_all_registered_files(config)
    files_to_include_dif = []
    for fti in files_to_include:
        if not have_same_content(fti, path_in_repo(fti, config)):
            files_to_include_dif.append(fti)
    if len(files_to_include_dif) == 0:
        cg_print("There are no changes in origins of registered files")
        end()
    cg_print(f"Including {len(files_to_include_dif)} files")
    for fti in files_to_include_dif:
        cg_print(f"Updating {path_relative_home(fti)}")
        write_file_to_other_file(fti, path_in_repo(fti, config))
    cg_print("Successfully updated")
    end()


def backup(config, backup_name):
    repo_dir = config["repo_dir"]
    if backup_name[-4:] != ".zip":
        backup_name += ".zip"
    backup_zip_file = zipfile.ZipFile(backup_name, mode="w", compression=zipfile.ZIP_DEFLATED)
    cg_print("Creating backup:")

    for root, directories, files in walk(repo_dir):
        for i, filename in enumerate(files):
            if ".git" in root:
                continue
            print(f"\t\t{'├── ' if i < len(files) - 1 else '└── '}{filename}")
            backup_zip_file.write(path.join(root, filename), arcname=filename)
    backup_zip_file.close()
    cg_print(f"Backup saved as {backup_name}")


def include(file_to_include, config, config_path):
    if file_to_include == "" or file_to_include is None:
        print_error("You have to specify file for include")
        end(1)
    if not path.exists(file_to_include):
        print_error(f"File or directory {file_to_include} does not exists")
        end(1)
    if config["include"] is None:
        config["include"] = []
    if path_relative_home(file_to_include) in config["include"]:
        cg_print(f"{file_to_include} is already included")
        end()
    config["include"].append(path_relative_home(file_to_include))
    save_config(config, config_path)
    cg_print(f"{file_to_include} has been successfully included in to confgit repository")
    end()


def exclude(file_to_exclude, config, config_path):
    if file_to_exclude == "" or file_to_exclude is None:
        print_error("You have to specify file for exclude")
        end(1)
    if not path.exists(file_to_exclude):
        print_error(f"File or directory {file_to_exclude} does not exists")
        end(1)
    if config["exclude"] is None:
        config["exclude"] = []
    if file_to_exclude in config["exclude"]:
        cg_print(f"{file_to_exclude} is already excluded")
        end()
    config["exclude"].append(path_relative_home(file_to_exclude))
    save_config(config, config_path)
    cg_print(f"{file_to_exclude} has been successfully excluded from confgit repository")
    end()


if __name__ == '__main__':
    if contains_confgit_command():
        args = vars(get_arguments())
        print_debug(args)

        if args["debug"]:
            debug_mode = True

        if "help" in args.keys():
            print(help_message)

        if "init_path" in args.keys():
            init(args["init_path"], args["CONFIG_PATH"])

        config = load_config(args["CONFIG_PATH"])
        print_debug(config)

        if "file_to_include" in args.keys():
            include(args["file_to_include"], config, args["CONFIG_PATH"])

        if "file_to_exclude" in args.keys():
            exclude(args["file_to_exclude"], config, args["CONFIG_PATH"])

        if "update" in args.keys():
            update(config)

        if "sync" in args.keys():
            sync(config)

        if "backup_name" in args.keys():
            backup(config, args["backup_name"])

    else:
        config, git_command = parse_git_args()
        print_debug(git_command)
        set_cwd_to(config["repo_dir"])
        send_to_git(git_command)
